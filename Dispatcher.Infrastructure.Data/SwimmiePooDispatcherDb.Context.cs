//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SwimmiePooLogParserDispatcher.Infrastructure.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Linq;
    using SwimmiePooLogParserDispatcher.Core;
    
    public partial class SwimmiePooLogParserDispatcherEntities : DbContext
    {
        public SwimmiePooLogParserDispatcherEntities()
            : base("name=SwimmiePooLogParserDispatcherEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Drone> Drones { get; set; }
        public DbSet<CurrentParseLine> CurrentParseLines { get; set; }
    
        public virtual int AddParseLine(string fileName, string path, Nullable<int> lineNumber, string line)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var lineNumberParameter = lineNumber.HasValue ?
                new ObjectParameter("LineNumber", lineNumber) :
                new ObjectParameter("LineNumber", typeof(int));
    
            var lineParameter = line != null ?
                new ObjectParameter("Line", line) :
                new ObjectParameter("Line", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddParseLine", fileNameParameter, pathParameter, lineNumberParameter, lineParameter);
        }
    
        public virtual int ClearTheParsed(string fileName, string path)
        {
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearTheParsed", fileNameParameter, pathParameter);
        }
    }
}
