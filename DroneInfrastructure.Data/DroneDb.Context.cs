//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SwimmiePooLogParserDrone.Infrastructure.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class DroneDbEntities : DbContext
    {
        public DroneDbEntities()
            : base("name=DroneDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int AddNewRequest(Nullable<System.DateTime> dateTime, string serverIPAddress, string clientIPAddress, Nullable<int> requestLength, string originatingLogFile, string originatingLogFilePath, Nullable<int> fileLineNumber)
        {
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var serverIPAddressParameter = serverIPAddress != null ?
                new ObjectParameter("ServerIPAddress", serverIPAddress) :
                new ObjectParameter("ServerIPAddress", typeof(string));
    
            var clientIPAddressParameter = clientIPAddress != null ?
                new ObjectParameter("ClientIPAddress", clientIPAddress) :
                new ObjectParameter("ClientIPAddress", typeof(string));
    
            var requestLengthParameter = requestLength.HasValue ?
                new ObjectParameter("RequestLength", requestLength) :
                new ObjectParameter("RequestLength", typeof(int));
    
            var originatingLogFileParameter = originatingLogFile != null ?
                new ObjectParameter("OriginatingLogFile", originatingLogFile) :
                new ObjectParameter("OriginatingLogFile", typeof(string));
    
            var originatingLogFilePathParameter = originatingLogFilePath != null ?
                new ObjectParameter("OriginatingLogFilePath", originatingLogFilePath) :
                new ObjectParameter("OriginatingLogFilePath", typeof(string));
    
            var fileLineNumberParameter = fileLineNumber.HasValue ?
                new ObjectParameter("FileLineNumber", fileLineNumber) :
                new ObjectParameter("FileLineNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewRequest", dateTimeParameter, serverIPAddressParameter, clientIPAddressParameter, requestLengthParameter, originatingLogFileParameter, originatingLogFilePathParameter, fileLineNumberParameter);
        }
    }
}
